// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Category {
  UMUM
  PELAJAR
  MANCANEGARA
}

enum Interval {
  PERMINGGU
  PERBULAN
  PERTAHUN
}

enum Status {
  SUDAH_DIGUNAKAN
  DAPAT_DIGUNAKAN
  EXPIRED
  MENUNGGU_PEMBAYARAN
}

model User {
  id            String        @id @default(uuid())
  name          String
  email         String        @unique
  number        String?
  password      String        @db.VarChar(50)
  role          Role          @default(USER)
  transaction   Transaction[]
  nationality   Nationality?  @relation(fields: [nationalityId], references: [id])
  nationalityId String?
}

model Customers {
  id       Int      @id @default(autoincrement())
  name     String   @db.Text
  email    String
  password String
  Tokens   Tokens[]
}

model Tokens {
  id         String    @id
  customer   Customers @relation(fields: [customerId], references: [id])
  customerId Int
}

model Order {
  id          String        @id @default(uuid())
  image       String?
  name        String
  desc        String?
  price       Decimal       @db.Decimal(18, 2)
  category    Category?
  interval    Interval?
  createdAt   DateTime      @default(now())
  detailTrans DetailTrans[]
}

model Transaction {
  id            String        @id @default(uuid())
  total         Decimal       @db.Decimal(18, 2)
  method        String
  status        Status
  date          DateTime
  discount      String
  user          User          @relation(fields: [userID], references: [id])
  userID        String
  detailTrans   DetailTrans[]
  nationality   Nationality?  @relation(fields: [nationalityId], references: [id])
  nationalityId String?
}

model DetailTrans {
  id            String      @id @default(uuid())
  amount        Int
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String
  order         Order       @relation(fields: [orderId], references: [id])
  orderId       String
}

model Nationality {
  id           String        @id @default(uuid())
  name         String
  code         String
  users        User[]
  transactions Transaction[]
}

model Contents {
  id        Int      @id @default(autoincrement())
  subPage   SubPages @relation(fields: [subPageId], references: [id])
  subPageId Int
  section   Int
  context   Json
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  Pages     Pages?   @relation(fields: [pagesId], references: [id])
  pagesId   Int?
}

model Pages {
  id        Int        @id @default(autoincrement())
  name      String
  updatedAt DateTime   @updatedAt
  createdAt DateTime   @default(now())
  Contents  Contents[]
  SubPages  SubPages[]
}

model SubPages {
  id       Int        @id @default(autoincrement())
  name     String
  order    Int
  page     Pages      @relation(fields: [pageId], references: [id])
  pageId   Int
  Contents Contents[]
}
